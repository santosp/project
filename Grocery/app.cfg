var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var GateMutexPri = xdc.useModule('ti.sysbios.gates.GateMutexPri');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');

/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
 */
Text.isLoaded = false;

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
 */
SysMin.flushAtExit = false;

/* 
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x0;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x400;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 128;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 4;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

/*
 * Build a custom BIOS library.  The custom library will be smaller than the 
 * pre-built "instrumented" (default) and "non-instrumented" libraries.
 *
 * The BIOS.logsEnabled parameter specifies whether the Logging is enabled
 * within BIOS for this custom build.  These logs are used by the RTA and
 * UIA analysis tools.
 *
 * The BIOS.assertsEnabled parameter specifies whether BIOS code will
 * include Assert() checks.  Setting this parameter to 'false' will generate
 * smaller and faster code, but having asserts enabled is recommended for
 * early development as the Assert() checks will catch lots of programming
 * errors (invalid parameters, etc.)
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = true;

/*
 * Create a task.  The 'taskFxn' function can be found in main.c.
 */
var task0Params = new Task.Params();
task0Params.priority = 1;
var task0 = Task.create("&taskFxn", task0Params);
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "hwi0";
hwi0Params.priority = 1;
hwi0Params.eventId = 16;
Program.global.hwi0 = Hwi.create(16, "&ButtonISR", hwi0Params);
Task.defaultStackSize = 1024;
var task1Params = new Task.Params();
task1Params.instance.name = "UI";
task1Params.priority = 2;
Program.global.UI = Task.create("&UiTask", task1Params);
var task2Params = new Task.Params();
task2Params.instance.name = "ButTask";
task2Params.priority = 3;
Program.global.ButTask = Task.create("&ButtonTask", task2Params);
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "Clock";
hwi1Params.priority = 1;
hwi1Params.eventId = 39;
Program.global.Clock = Hwi.create(39, "&Timer0IntHandler", hwi1Params);
BIOS.swiEnabled = true;
BIOS.rtsGateType = BIOS.NoLocking;
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "KeySem";
semaphore0Params.mode = Semaphore.Mode_BINARY;
Program.global.KeySem = Semaphore.create(null, semaphore0Params);
var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "hwi2";
hwi2Params.priority = 3;
hwi2Params.eventId = 17;
Program.global.hwi2 = Hwi.create(17, "&FSSIntHandler", hwi2Params);
var task3Params = new Task.Params();
task3Params.instance.name = "KeyboardTask";
task3Params.priority = 4;
Program.global.KeyboardTask = Task.create("&KeyTask", task3Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "DataSem";
Program.global.DataSem = Semaphore.create(null, semaphore1Params);
